@use "sass:math";

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
    str-replace(str-slice($string, $index +
    str-length($search)), $search, $replace);
  }
  @return $string;
}


@function svg-url($svg){
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk,':','%3A');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function moon($e, $a: 0) {
  @return svg-url(#{
    "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 500 500'>" +
      "<path transform='rotate(#{$a}, 250, 250)' id='curve' fill='none' d='M243.2, 382.4c-74.8,0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,135.5 S318, 382.4, 243.2, 382.4z' />" +
      "<text x='0' font-size='84'>" +
        "<textPath xlink:href='#curve'>" +
          $e +
        "</textPath>" +
      "</text>" +
    "</svg>"
  });
}

$moons: svg-url(#{
  "<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 500 500'>" +
    "<path id='curve' fill='none' d='M243.2, 382.4c-74.8,0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,135.5 S318, 382.4, 243.2, 382.4z' />" +
    "<text x='0' font-size='84'>" +
      "<textPath xlink:href='#curve'>" +
        "ðŸŒ• ðŸŒ– ðŸŒ— ðŸŒ˜ ðŸŒ‘ ðŸŒ’ ðŸŒ“ ðŸŒ” " +
      "</textPath>" +
    "</text>" +
  "</svg>"
});

:root {
  --size: 100vmin;
  --snow: snow;
  --tree: saddlebrown;
}

@media (min-width: 512px) and (min-height: 512px) {
  :root {
    --size: 80vmin;
  }
}

html {
  background: #111;
}

body {
  background: red;
  margin: 0;
  height: var(--size);
  width: var(--size);
  overflow: hidden;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  left: 50%;
  background: linear-gradient(
    180deg,
    black 50%,
    blue 50%
  );
}

body::before,
body::after {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  content: "";
}

$or: math.sqrt(
  math.pow(100, 2) * 2
) / 2;
$ir: 50;

$sea: (
  (3 * math.$pi) / 4,
  math.$pi / 4,
  0,
  math.$pi,
);

$sky: (
  math.$pi,
  math.$pi * 2,
  (math.$pi * 7) / 4,
  (math.$pi * 5) / 4,
);

@function cpx($a, $r) {
  @return math.cos($a) * $r;
}

@function cpy($a, $r) {
  @return math.sin($a) * $r;
}

@function ox($a) {
  @return cpx($a, $or) + 50%;
}

@function oy($a) {
  @return cpy($a, $or) + 50%;
}

@function ix($a) {
  @return cpx($a, $ir) + 50%;
}

@function iy($a) {
  @return cpy($a, $ir) + 50%;
}

@function sky($p) {
  $polygon: ();
  @for $i from 1 through 4 {
    $a: nth($sky, $i);
    $a: $a + (math.$pi * 2) * $p;
    $polygon: append(
      $polygon,
      ox($a) oy($a),
      $separator: comma
    );
  }
  @return polygon(
    $polygon
  );
}

@function sea($p) {
  $polygon: ();
  @for $i from 1 through 4 {
    $a: nth($sea, $i);
    $a: $a - (math.$pi * 2) * $p;
    $polygon: append(
      $polygon,
      ox($a) oy($a),
      $separator: comma
    );
  }
  @return polygon(
    $polygon
  );
}

@keyframes anticlockwise {
  @for $i from 0 through 100 {
    #{$i * 1%} {
      clip-path: sky($i / 100);
      transform: rotate($i / 100 * -360deg);
    }
  }
}

body::before {
  background-image: moon("ðŸŒ˜", -64);
  animation-name: anticlockwise;
  animation-duration: math.pow(2, 13) * 1ms;
  animation-direction: normal;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform-origin: center;
  mix-blend-mode: luminosity;
}

@keyframes clockwise {
  @for $i from 0 through 100 {
    #{$i * 1%} {
      clip-path: sea($i / 100);
      transform: rotate($i / -100 * -360deg);
    }
  }
}

body::after {
  background-image: moon("ðŸŒ˜", -156);
  animation-name: clockwise;
  animation-duration: math.pow(2, 13) * 1ms;
  animation-direction: normal;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform-origin: center;
  mix-blend-mode: luminosity;
}

