@use "sass:math";

// $or is the radius of the outer
// circle which circumscribes the
// square and $ir is the radius
// of the inner circle inside it
// +------------+
// |    x  x    |
// | x+------+x |
// |x |      | x|
// |x |      | x|
// | x+------+x |
// |    x  x    |
// +------------+
$or: math.sqrt(
  math.pow(100, 2) * 2
) / 2;
$ir: 50;

$sea: (
  (3 * math.$pi) / 4,
  math.$pi / 4,
  0,
  math.$pi,
);

$sky: (
  math.$pi,
  math.$pi * 2,
  (math.$pi * 7) / 4,
  (math.$pi * 5) / 4,
);

@function str-replace($s, $a, $b) {
  $index: str-index($s, $a);
  @if $index {
    $prefix: str-slice(
      $s, 1, $index - 1
    );
    $suffix: str-replace(
      str-slice(
        $s, $index + str-length($a)
      ),
      $a, $b
    );
    @return $prefix + $b + $suffix;
  }
  @return $s;
}

@function svg-url($svg){
  $prefix: "data:image/svg+xml;charset=utf8,";
  $chars: (
    '"': "'",
    ":": "%3A",
    "<": "%3C",
    ">": "%3E",
    "&": "%26",
    "#": "%23",
  );
  $encoded: "";
  $slice: 2000;
  $index: 0;
  $loops: ceil(
    str-length($svg) / $slice
  );
  @for $i from 1 through $loops {
    $chunk: str-slice(
      $svg,
      $index,
      $index + $slice - 1
    );
    @each $a, $b in $chars {
      $chunk: str-replace(
        $chunk,
        $a,
        $b
      );
    }
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url($prefix + $encoded);
}

@function e($n, $p, $c: ()) {
  $html: "<#{$n}";
  @each $k,$v in $p {
    $html: "#{$html} #{$k}=\"#{$v}\"";
  }
  @if (type-of($c) == "string") {
    $html: "#{$html}>#{$c}</#{$n}>";
  } @else {
    $html: "#{$html} />";
  }
  @return $html;
}

@function moon($e, $a: 0) {
  @return svg-url(
    e(
      "svg",
      (
        "xmlns": "http://www.w3.org/2000/svg",
        "xmlns:xlink": "http://www.w3.org/1999/xlink",
        "viewBox": "0 0 500 500",
      ),
      e(
        "path",
        (
          "transform": "rotate(#{$a}, 250, 250)" ,
          "id": "curve",
          "fill": "none",
          "d": "M243.2, 382.4c-74.8,0-135.5-60.7-135.5-135.5s60.7-135.5,135.5-135.5s135.5, 60.7, 135.5,135.5 S318, 382.4, 243.2, 382.4z",
        )
      ) + e(
        "text",
        (
          "x": "0",
          "font-size": "84",
        ),
        e(
          "textPath",
          (
            "xlink:href": "#curve",
          ),
          $e
        )
      )
    )
  );
}

@function cpx($a, $r) {
  @return math.cos($a) * $r;
}

@function cpy($a, $r) {
  @return math.sin($a) * $r;
}

@function ox($a) {
  @return cpx($a, $or) + 50%;
}

@function oy($a) {
  @return cpy($a, $or) + 50%;
}

@function ix($a) {
  @return cpx($a, $ir) + 50%;
}

@function iy($a) {
  @return cpy($a, $ir) + 50%;
}

@function fix($o, $p) {
  $polygon: ();
  @for $i from 1 through 4 {
    $a: nth($o, $i);
    $a: $a + (math.$pi * 2) * $p;
    $polygon: append(
      $polygon,
      ox($a) oy($a),
      $separator: comma
    );
  }
  @return polygon(
    $polygon
  );
}

:root {
  --size: 100vmin;
}

@media (min-width: 512px) and (min-height: 512px) {
  :root {
    --sky: #010;
    --sea: blue;
    --size: 80vmin;
  }
}

html {
  background: #111;
}

body {
  background: red;
  margin: 0;
  height: var(--size);
  width: var(--size);
  overflow: hidden;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
  left: 50%;
  background: linear-gradient(
    180deg,
    var(--sky) 50%,
    var(--sea) 50%
  );
}

body::before,
body::after {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  content: "";
}

@keyframes sky {
  @for $i from 0 through 100 {
    #{$i * 1%} {
      clip-path: fix($sky, $i / 100);
      transform: rotate($i / 100 * -360deg);
    }
  }
}

@keyframes sea {
  @for $i from 0 through 100 {
    #{$i * 1%} {
      clip-path: fix($sea, (100 - $i) / 100 * -1);
      transform: rotate($i / -100 * -360deg) scaleX(-1);
    }
  }
}

body::before {
  background-image: moon("ðŸŒ˜", -64);
  animation-name: sky;
  animation-duration: math.pow(2, 13) * 1ms;
  animation-direction: normal;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform-origin: center;
  mix-blend-mode: luminosity;
}

body::after {
  background-image: moon("ðŸŒ˜", 112);
  animation-name: sea;
  animation-duration: math.pow(2, 13) * 1ms;
  animation-direction: normal;
  animation-iteration-count: infinite;
  animation-timing-function: linear;
  transform-origin: center;
  mix-blend-mode: luminosity;
}

